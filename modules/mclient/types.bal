// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/constraint;
import ballerina/data.jsondata;
import ballerina/http;

public type InlineResponse200 record {
    Links[] links?;
};

public type Attachment record {
    AttachmentMetas metas?;
    string href?;
};

# Represents the Queries record for the operation: exportRecordsCSV
public type ExportRecordsCSVQueries record {
    @http:Query {name: "list_separator"}
    string listSeparator = ",";
    @http:Query {name: "with_bom"}
    boolean withBom = true;
    # Sets the field delimiter of the CSV export
    ";"|","|"	"|"|" delimiter = ";";
    @http:Query {name: "quote_all"}
    boolean quoteAll = false;
};

public type FacetValueEnumeration record {
    string name?;
    int count?;
    string state?;
    string value?;
};

# Represents the Queries record for the operation: getRecords
public type GetRecordsQueries record {
    @http:Query {name: "include_links"}
    boolean includeLinks = false;
    # Examples:
    # - `select=size` - Example of select, which only return the "size" field.
    # - `select=size * 2 as bigger_size` - Example of a complex expression with a label, which returns a new field named "bigger_size" and containing the double of size field value.
    # - `select=dataset_id, fields` - Example of a select in catalog ODSQL query to only retrieve dataset_id and schema of datasets.
    # 
    # A select expression can be used to add, remove or change the fields to return.
    # An expression can be:
    #   - a wildcard ('*'): all fields are returned.
    #   - A field name: only the specified field is returned.
    #   - An include/exclude function: All fields matching the include or exclude expression are included or excluded. This expression can contain wildcard.
    #   - A complex expression. The result of the expression is returned. A label can be set for this expression, and in that case, the field will be named after this label.
    string 'select?;
    # Index of the first item to return (starting at 0).
    # 
    # To use with the `limit` parameter to implement pagination.
    # 
    # **Note:** the maximum value depends on the type of query, see the note on `limit` for the details
    @constraint:Int {minValue: 0}
    int offset = 0;
    # Set the timezone for datetime fields.
    # 
    # Timezone IDs are defined by the [Unicode CLDR project](https://github.com/unicode-org/cldr). The list of timezone IDs is available in [timezone.xml](https://github.com/unicode-org/cldr/blob/master/common/bcp47/timezone.xml).
    string timezone = "UTC";
    @http:Query {name: "include_app_metas"}
    boolean includeAppMetas = false;
    # Number of items to return.
    # 
    # To use with the `offset` parameter to implement pagination.
    # 
    # The maximum possible value depends on whether the query contains a `group_by` clause or not.
    # 
    # For a query **without** a `group_by`:
    #   - the maximum value for `limit` is 100,
    #   - `offset+limit` should be less than 10000
    # 
    # For a query **with** a `group_by`:
    #   - the maximum value for `limit` is 20000,
    #   - `offset+limit` should be less than 20000
    # 
    # **Note:** If you need more results, please use the /exports endpoint.
    @constraint:Int {minValue: -1, maxValue: 100}
    int 'limit = 10;
    @http:Query {name: "group_by"}
    string groupBy?;
    @http:Query {name: "order_by"}
    string orderBy?;
    # A `where` filter is a text expression performing a simple full-text search that can also include logical operations
    # (NOT, AND, OR...) and lots of other functions to perform complex and precise search operations.
    # 
    # For more information, see [Opendatasoft Query Language (ODSQL)](<https://help.opendatasoft.com/apis/ods-explore-v2/#section/Opendatasoft-Query-Language-(ODSQL)/Where-clause>) reference documentation.
    string 'where?;
    # Example: `refine=modified:2020` - Return only the value `2020` from the `modified` facet.
    # 
    # A facet filter used to limit the result set.
    # Using this parameter, you can refine your query to display only the selected facet value in the response.
    # 
    # Refinement uses the following syntax: `refine=<FACETNAME>:<FACETVALUE>`
    # 
    # For date, and other hierarchical facets, when refining on one value, all second-level values related to that entry will appear in facets enumeration. For example, after refining on the year 2019, the related second-level month will appear. And when refining on August 2019, the third-level day will appear.
    # 
    # **`refine` must not be confused with a `where` filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.**
    string refine?;
    # Examples:
    # - `exclude=city:Paris` - Exclude the value `Paris` from the `city` facet. Facets enumeration will display `Paris` as `excluded` without any count information.
    # - `exclude=modified:2019/12` - Exclude the value `2019/12` from the `modified` facet. Facets enumeration will display `2020` as `excluded` without any count information.
    # 
    # A facet filter used to exclude a facet value from the result set.
    # Using this parameter, you can filter your query to exclude the selected facet value in the response.
    # 
    # `exclude` uses the following syntax: `exclude=<FACETNAME>:<FACETVALUE>`
    # 
    # **`exclude` must not be confused with a `where` filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.**
    string exclude?;
    # A language value.
    # 
    # If specified, the `lang` value override the default language, which is "fr".
    # The language is used to format string, for example in the `date_format` function.
    "en"|"fr"|"nl"|"pt"|"it"|"ar"|"de"|"es"|"ca"|"eu"|"sv" lang?;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    ClientHttp1Settings http1Settings?;
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings?;
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 60;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache?;
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits?;
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

public type EnumFormatDatasetsV21 "csv"|"fgb"|"geojson"|"gpx"|"json"|"jsonl"|"jsonld"|"kml"|"n3"|"ov2"|"parquet"|"rdfxml"|"shp"|"turtle"|"xlsx";

# Represents the Queries record for the operation: getRecordsFacets
public type GetRecordsFacetsQueries record {
    # Set the timezone for datetime fields.
    # 
    # Timezone IDs are defined by the [Unicode CLDR project](https://github.com/unicode-org/cldr). The list of timezone IDs is available in [timezone.xml](https://github.com/unicode-org/cldr/blob/master/common/bcp47/timezone.xml).
    string timezone = "UTC";
    # A `where` filter is a text expression performing a simple full-text search that can also include logical operations
    # (NOT, AND, OR...) and lots of other functions to perform complex and precise search operations.
    # 
    # For more information, see [Opendatasoft Query Language (ODSQL)](<https://help.opendatasoft.com/apis/ods-explore-v2/#section/Opendatasoft-Query-Language-(ODSQL)/Where-clause>) reference documentation.
    string 'where?;
    # Example: `refine=modified:2020` - Return only the value `2020` from the `modified` facet.
    # 
    # A facet filter used to limit the result set.
    # Using this parameter, you can refine your query to display only the selected facet value in the response.
    # 
    # Refinement uses the following syntax: `refine=<FACETNAME>:<FACETVALUE>`
    # 
    # For date, and other hierarchical facets, when refining on one value, all second-level values related to that entry will appear in facets enumeration. For example, after refining on the year 2019, the related second-level month will appear. And when refining on August 2019, the third-level day will appear.
    # 
    # **`refine` must not be confused with a `where` filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.**
    string refine?;
    # Examples:
    # - `exclude=city:Paris` - Exclude the value `Paris` from the `city` facet. Facets enumeration will display `Paris` as `excluded` without any count information.
    # - `exclude=modified:2019/12` - Exclude the value `2019/12` from the `modified` facet. Facets enumeration will display `2020` as `excluded` without any count information.
    # 
    # A facet filter used to exclude a facet value from the result set.
    # Using this parameter, you can filter your query to exclude the selected facet value in the response.
    # 
    # `exclude` uses the following syntax: `exclude=<FACETNAME>:<FACETVALUE>`
    # 
    # **`exclude` must not be confused with a `where` filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.**
    string exclude?;
    # A language value.
    # 
    # If specified, the `lang` value override the default language, which is "fr".
    # The language is used to format string, for example in the `date_format` function.
    "en"|"fr"|"nl"|"pt"|"it"|"ar"|"de"|"es"|"ca"|"eu"|"sv" lang?;
    # A facet is a field used for simple filtering (through the `refine` and `exclude` parameters) or exploration (with the `/facets` endpoint).
    # 
    # Facets can be configured in the back-office or with this parameter.
    string facet?;
};

# Represents the Queries record for the operation: getDatasets
public type GetDatasetsQueries record {
    @http:Query {name: "include_links"}
    boolean includeLinks = false;
    # Examples:
    # - `select=size` - Example of select, which only return the "size" field.
    # - `select=size * 2 as bigger_size` - Example of a complex expression with a label, which returns a new field named "bigger_size" and containing the double of size field value.
    # - `select=dataset_id, fields` - Example of a select in catalog ODSQL query to only retrieve dataset_id and schema of datasets.
    # 
    # A select expression can be used to add, remove or change the fields to return.
    # An expression can be:
    #   - a wildcard ('*'): all fields are returned.
    #   - A field name: only the specified field is returned.
    #   - An include/exclude function: All fields matching the include or exclude expression are included or excluded. This expression can contain wildcard.
    #   - A complex expression. The result of the expression is returned. A label can be set for this expression, and in that case, the field will be named after this label.
    string 'select?;
    # Index of the first item to return (starting at 0).
    # 
    # To use with the `limit` parameter to implement pagination.
    # 
    # **Note:** the maximum value depends on the type of query, see the note on `limit` for the details
    @constraint:Int {minValue: 0}
    int offset = 0;
    # Set the timezone for datetime fields.
    # 
    # Timezone IDs are defined by the [Unicode CLDR project](https://github.com/unicode-org/cldr). The list of timezone IDs is available in [timezone.xml](https://github.com/unicode-org/cldr/blob/master/common/bcp47/timezone.xml).
    string timezone = "UTC";
    @http:Query {name: "include_app_metas"}
    boolean includeAppMetas = false;
    # Number of items to return.
    # 
    # To use with the `offset` parameter to implement pagination.
    # 
    # The maximum possible value depends on whether the query contains a `group_by` clause or not.
    # 
    # For a query **without** a `group_by`:
    #   - the maximum value for `limit` is 100,
    #   - `offset+limit` should be less than 10000
    # 
    # For a query **with** a `group_by`:
    #   - the maximum value for `limit` is 20000,
    #   - `offset+limit` should be less than 20000
    # 
    # **Note:** If you need more results, please use the /exports endpoint.
    @constraint:Int {minValue: -1, maxValue: 100}
    int 'limit = 10;
    @http:Query {name: "order_by"}
    string orderBy?;
    @http:Query {name: "group_by"}
    string groupBy?;
    # A `where` filter is a text expression performing a simple full-text search that can also include logical operations
    # (NOT, AND, OR...) and lots of other functions to perform complex and precise search operations.
    # 
    # For more information, see [Opendatasoft Query Language (ODSQL)](<https://help.opendatasoft.com/apis/ods-explore-v2/#section/Opendatasoft-Query-Language-(ODSQL)/Where-clause>) reference documentation.
    string 'where?;
    # Example: `refine=modified:2020` - Return only the value `2020` from the `modified` facet.
    # 
    # A facet filter used to limit the result set.
    # Using this parameter, you can refine your query to display only the selected facet value in the response.
    # 
    # Refinement uses the following syntax: `refine=<FACETNAME>:<FACETVALUE>`
    # 
    # For date, and other hierarchical facets, when refining on one value, all second-level values related to that entry will appear in facets enumeration. For example, after refining on the year 2019, the related second-level month will appear. And when refining on August 2019, the third-level day will appear.
    # 
    # **`refine` must not be confused with a `where` filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.**
    string refine?;
    # Examples:
    # - `exclude=city:Paris` - Exclude the value `Paris` from the `city` facet. Facets enumeration will display `Paris` as `excluded` without any count information.
    # - `exclude=modified:2019/12` - Exclude the value `2019/12` from the `modified` facet. Facets enumeration will display `2020` as `excluded` without any count information.
    # 
    # A facet filter used to exclude a facet value from the result set.
    # Using this parameter, you can filter your query to exclude the selected facet value in the response.
    # 
    # `exclude` uses the following syntax: `exclude=<FACETNAME>:<FACETVALUE>`
    # 
    # **`exclude` must not be confused with a `where` filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.**
    string exclude?;
    # A language value.
    # 
    # If specified, the `lang` value override the default language, which is "fr".
    # The language is used to format string, for example in the `date_format` function.
    "en"|"fr"|"nl"|"pt"|"it"|"ar"|"de"|"es"|"ca"|"eu"|"sv" lang?;
};

# Represents the Queries record for the operation: exportRecordsGPX
public type ExportRecordsGPXQueries record {
    @http:Query {name: "description_field_list"}
    string descriptionFieldList?;
    @http:Query {name: "use_extension"}
    boolean useExtension = true;
    @http:Query {name: "name_field"}
    string nameField?;
};

# Represents the Queries record for the operation: exportCatalogDCAT
public type ExportCatalogDCATQueries record {
    @http:Query {name: "include_exports"}
    EnumFormatDatasetsV21 includeExports?;
};

# Proxy server configurations to be used with the HTTP client endpoint.
public type ProxyConfig record {|
    # Host name of the proxy server
    string host = "";
    # Proxy server port
    int port = 0;
    # Proxy server username
    string userName = "";
    # Proxy server password
    @display {label: "", kind: "password"}
    string password = "";
|};

public type RecordV21 record {
    @jsondata:Name {value: "_size"}
    int size?;
    string field1?;
    @jsondata:Name {value: "_links"}
    Links[] links?;
    @jsondata:Name {value: "_id"}
    string id?;
    @jsondata:Name {value: "_timestamp"}
    string timestamp?;
    int field2?;
};

public type FacetEnumeration record {
    string name?;
    FacetValueEnumeration[] facets?;
};

# Represents the Queries record for the operation: getRecord
public type GetRecordQueries record {
    # Examples:
    # - `select=size` - Example of select, which only return the "size" field.
    # - `select=size * 2 as bigger_size` - Example of a complex expression with a label, which returns a new field named "bigger_size" and containing the double of size field value.
    # - `select=dataset_id, fields` - Example of a select in catalog ODSQL query to only retrieve dataset_id and schema of datasets.
    # 
    # A select expression can be used to add, remove or change the fields to return.
    # An expression can be:
    #   - a wildcard ('*'): all fields are returned.
    #   - A field name: only the specified field is returned.
    #   - An include/exclude function: All fields matching the include or exclude expression are included or excluded. This expression can contain wildcard.
    #   - A complex expression. The result of the expression is returned. A label can be set for this expression, and in that case, the field will be named after this label.
    string 'select?;
    # Set the timezone for datetime fields.
    # 
    # Timezone IDs are defined by the [Unicode CLDR project](https://github.com/unicode-org/cldr). The list of timezone IDs is available in [timezone.xml](https://github.com/unicode-org/cldr/blob/master/common/bcp47/timezone.xml).
    string timezone = "UTC";
    # A language value.
    # 
    # If specified, the `lang` value override the default language, which is "fr".
    # The language is used to format string, for example in the `date_format` function.
    "en"|"fr"|"nl"|"pt"|"it"|"ar"|"de"|"es"|"ca"|"eu"|"sv" lang?;
};

# Represents the Queries record for the operation: getDataset
public type GetDatasetQueries record {
    @http:Query {name: "include_links"}
    boolean includeLinks = false;
    # Examples:
    # - `select=size` - Example of select, which only return the "size" field.
    # - `select=size * 2 as bigger_size` - Example of a complex expression with a label, which returns a new field named "bigger_size" and containing the double of size field value.
    # - `select=dataset_id, fields` - Example of a select in catalog ODSQL query to only retrieve dataset_id and schema of datasets.
    # 
    # A select expression can be used to add, remove or change the fields to return.
    # An expression can be:
    #   - a wildcard ('*'): all fields are returned.
    #   - A field name: only the specified field is returned.
    #   - An include/exclude function: All fields matching the include or exclude expression are included or excluded. This expression can contain wildcard.
    #   - A complex expression. The result of the expression is returned. A label can be set for this expression, and in that case, the field will be named after this label.
    string 'select?;
    # Set the timezone for datetime fields.
    # 
    # Timezone IDs are defined by the [Unicode CLDR project](https://github.com/unicode-org/cldr). The list of timezone IDs is available in [timezone.xml](https://github.com/unicode-org/cldr/blob/master/common/bcp47/timezone.xml).
    string timezone = "UTC";
    @http:Query {name: "include_app_metas"}
    boolean includeAppMetas = false;
    # A language value.
    # 
    # If specified, the `lang` value override the default language, which is "fr".
    # The language is used to format string, for example in the `date_format` function.
    "en"|"fr"|"nl"|"pt"|"it"|"ar"|"de"|"es"|"ca"|"eu"|"sv" lang?;
};

# Represents the Queries record for the operation: exportRecords
public type ExportRecordsQueries record {
    # This parameter sets the EPSG code to project shapes into for formats that support geometric features.
    int epsg = 4326;
    @http:Query {name: "use_labels"}
    boolean useLabels = false;
    # Examples:
    # - `select=size` - Example of select, which only return the "size" field.
    # - `select=size * 2 as bigger_size` - Example of a complex expression with a label, which returns a new field named "bigger_size" and containing the double of size field value.
    # - `select=dataset_id, fields` - Example of a select in catalog ODSQL query to only retrieve dataset_id and schema of datasets.
    # 
    # A select expression can be used to add, remove or change the fields to return.
    # An expression can be:
    #   - a wildcard ('*'): all fields are returned.
    #   - A field name: only the specified field is returned.
    #   - An include/exclude function: All fields matching the include or exclude expression are included or excluded. This expression can contain wildcard.
    #   - A complex expression. The result of the expression is returned. A label can be set for this expression, and in that case, the field will be named after this label.
    string 'select?;
    # Set the timezone for datetime fields.
    # 
    # Timezone IDs are defined by the [Unicode CLDR project](https://github.com/unicode-org/cldr). The list of timezone IDs is available in [timezone.xml](https://github.com/unicode-org/cldr/blob/master/common/bcp47/timezone.xml).
    string timezone = "UTC";
    # Number of items to return in export.
    # 
    # Use -1 (default) to retrieve all records
    @constraint:Int {minValue: -1}
    int 'limit = -1;
    @http:Query {name: "order_by"}
    string orderBy?;
    @http:Query {name: "group_by"}
    string groupBy?;
    # A `where` filter is a text expression performing a simple full-text search that can also include logical operations
    # (NOT, AND, OR...) and lots of other functions to perform complex and precise search operations.
    # 
    # For more information, see [Opendatasoft Query Language (ODSQL)](<https://help.opendatasoft.com/apis/ods-explore-v2/#section/Opendatasoft-Query-Language-(ODSQL)/Where-clause>) reference documentation.
    string 'where?;
    # Example: `refine=modified:2020` - Return only the value `2020` from the `modified` facet.
    # 
    # A facet filter used to limit the result set.
    # Using this parameter, you can refine your query to display only the selected facet value in the response.
    # 
    # Refinement uses the following syntax: `refine=<FACETNAME>:<FACETVALUE>`
    # 
    # For date, and other hierarchical facets, when refining on one value, all second-level values related to that entry will appear in facets enumeration. For example, after refining on the year 2019, the related second-level month will appear. And when refining on August 2019, the third-level day will appear.
    # 
    # **`refine` must not be confused with a `where` filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.**
    string refine?;
    # Examples:
    # - `exclude=city:Paris` - Exclude the value `Paris` from the `city` facet. Facets enumeration will display `Paris` as `excluded` without any count information.
    # - `exclude=modified:2019/12` - Exclude the value `2019/12` from the `modified` facet. Facets enumeration will display `2020` as `excluded` without any count information.
    # 
    # A facet filter used to exclude a facet value from the result set.
    # Using this parameter, you can filter your query to exclude the selected facet value in the response.
    # 
    # `exclude` uses the following syntax: `exclude=<FACETNAME>:<FACETVALUE>`
    # 
    # **`exclude` must not be confused with a `where` filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.**
    string exclude?;
    # A language value.
    # 
    # If specified, the `lang` value override the default language, which is "fr".
    # The language is used to format string, for example in the `date_format` function.
    "en"|"fr"|"nl"|"pt"|"it"|"ar"|"de"|"es"|"ca"|"eu"|"sv" lang?;
};

# Represents the Queries record for the operation: exportDatasets
public type ExportDatasetsQueries record {
    # Examples:
    # - `select=size` - Example of select, which only return the "size" field.
    # - `select=size * 2 as bigger_size` - Example of a complex expression with a label, which returns a new field named "bigger_size" and containing the double of size field value.
    # - `select=dataset_id, fields` - Example of a select in catalog ODSQL query to only retrieve dataset_id and schema of datasets.
    # 
    # A select expression can be used to add, remove or change the fields to return.
    # An expression can be:
    #   - a wildcard ('*'): all fields are returned.
    #   - A field name: only the specified field is returned.
    #   - An include/exclude function: All fields matching the include or exclude expression are included or excluded. This expression can contain wildcard.
    #   - A complex expression. The result of the expression is returned. A label can be set for this expression, and in that case, the field will be named after this label.
    string 'select?;
    # Index of the first item to return (starting at 0).
    # 
    # To use with the `limit` parameter to implement pagination.
    # 
    # **Note:** the maximum value depends on the type of query, see the note on `limit` for the details
    @constraint:Int {minValue: 0}
    int offset = 0;
    # Set the timezone for datetime fields.
    # 
    # Timezone IDs are defined by the [Unicode CLDR project](https://github.com/unicode-org/cldr). The list of timezone IDs is available in [timezone.xml](https://github.com/unicode-org/cldr/blob/master/common/bcp47/timezone.xml).
    string timezone = "UTC";
    # Number of items to return in export.
    # 
    # Use -1 (default) to retrieve all records
    @constraint:Int {minValue: -1}
    int 'limit = -1;
    @http:Query {name: "order_by"}
    string orderBy?;
    @http:Query {name: "group_by"}
    string groupBy?;
    # A `where` filter is a text expression performing a simple full-text search that can also include logical operations
    # (NOT, AND, OR...) and lots of other functions to perform complex and precise search operations.
    # 
    # For more information, see [Opendatasoft Query Language (ODSQL)](<https://help.opendatasoft.com/apis/ods-explore-v2/#section/Opendatasoft-Query-Language-(ODSQL)/Where-clause>) reference documentation.
    string 'where?;
    # Example: `refine=modified:2020` - Return only the value `2020` from the `modified` facet.
    # 
    # A facet filter used to limit the result set.
    # Using this parameter, you can refine your query to display only the selected facet value in the response.
    # 
    # Refinement uses the following syntax: `refine=<FACETNAME>:<FACETVALUE>`
    # 
    # For date, and other hierarchical facets, when refining on one value, all second-level values related to that entry will appear in facets enumeration. For example, after refining on the year 2019, the related second-level month will appear. And when refining on August 2019, the third-level day will appear.
    # 
    # **`refine` must not be confused with a `where` filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.**
    string refine?;
    # Examples:
    # - `exclude=city:Paris` - Exclude the value `Paris` from the `city` facet. Facets enumeration will display `Paris` as `excluded` without any count information.
    # - `exclude=modified:2019/12` - Exclude the value `2019/12` from the `modified` facet. Facets enumeration will display `2020` as `excluded` without any count information.
    # 
    # A facet filter used to exclude a facet value from the result set.
    # Using this parameter, you can filter your query to exclude the selected facet value in the response.
    # 
    # `exclude` uses the following syntax: `exclude=<FACETNAME>:<FACETVALUE>`
    # 
    # **`exclude` must not be confused with a `where` filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.**
    string exclude?;
    # A language value.
    # 
    # If specified, the `lang` value override the default language, which is "fr".
    # The language is used to format string, for example in the `date_format` function.
    "en"|"fr"|"nl"|"pt"|"it"|"ar"|"de"|"es"|"ca"|"eu"|"sv" lang?;
};

# Represents the Queries record for the operation: getDatasetsFacets
public type GetDatasetsFacetsQueries record {
    # Set the timezone for datetime fields.
    # 
    # Timezone IDs are defined by the [Unicode CLDR project](https://github.com/unicode-org/cldr). The list of timezone IDs is available in [timezone.xml](https://github.com/unicode-org/cldr/blob/master/common/bcp47/timezone.xml).
    string timezone = "UTC";
    # Example: `refine=modified:2020` - Return only the value `2020` from the `modified` facet.
    # 
    # A facet filter used to limit the result set.
    # Using this parameter, you can refine your query to display only the selected facet value in the response.
    # 
    # Refinement uses the following syntax: `refine=<FACETNAME>:<FACETVALUE>`
    # 
    # For date, and other hierarchical facets, when refining on one value, all second-level values related to that entry will appear in facets enumeration. For example, after refining on the year 2019, the related second-level month will appear. And when refining on August 2019, the third-level day will appear.
    # 
    # **`refine` must not be confused with a `where` filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.**
    string refine?;
    # Examples:
    # - `exclude=city:Paris` - Exclude the value `Paris` from the `city` facet. Facets enumeration will display `Paris` as `excluded` without any count information.
    # - `exclude=modified:2019/12` - Exclude the value `2019/12` from the `modified` facet. Facets enumeration will display `2020` as `excluded` without any count information.
    # 
    # A facet filter used to exclude a facet value from the result set.
    # Using this parameter, you can filter your query to exclude the selected facet value in the response.
    # 
    # `exclude` uses the following syntax: `exclude=<FACETNAME>:<FACETVALUE>`
    # 
    # **`exclude` must not be confused with a `where` filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.**
    string exclude?;
    # A `where` filter is a text expression performing a simple full-text search that can also include logical operations
    # (NOT, AND, OR...) and lots of other functions to perform complex and precise search operations.
    # 
    # For more information, see [Opendatasoft Query Language (ODSQL)](<https://help.opendatasoft.com/apis/ods-explore-v2/#section/Opendatasoft-Query-Language-(ODSQL)/Where-clause>) reference documentation.
    string 'where?;
    # A facet is a field used for simple filtering (through the `refine` and `exclude` parameters) or exploration (with the `/facets` endpoint).
    # 
    # Facets can be configured in the back-office or with this parameter.
    string facet?;
};

# Provides settings related to HTTP/1.x protocol.
public type ClientHttp1Settings record {|
    # Specifies whether to reuse a connection for multiple requests
    http:KeepAlive keepAlive = http:KEEPALIVE_AUTO;
    # The chunking behaviour of the request
    http:Chunking chunking = http:CHUNKING_AUTO;
    # Proxy server related options
    ProxyConfig proxy?;
|};

public type ResultsV21 record {
    @jsondata:Name {value: "_links"}
    Links[] links?;
    @jsondata:Name {value: "total_count"}
    int totalCount?;
    RecordV21[] results?;
};

# Represents the Queries record for the operation: exportCatalogCSV
public type ExportCatalogCSVQueries record {
    @http:Query {name: "list_separator"}
    string listSeparator = ",";
    @http:Query {name: "with_bom"}
    boolean withBom = true;
    # Sets the field delimiter of the CSV export
    ";"|","|"	"|"|" delimiter = ";";
    @http:Query {name: "quote_all"}
    boolean quoteAll = false;
};

public type InlineResponse2001 record {
    Links[] links?;
    FacetEnumeration[] facets?;
};

public type Links record {
    "self"|"first"|"last"|"next"|"dataset"|"catalog" rel?;
    string href?;
};

public type AttachmentMetas record {
    @jsondata:Name {value: "mime-type"}
    string mimeType?;
    string id?;
    string title?;
    string url?;
};

public type InlineResponse2002 record {
    Attachment[] attachments?;
    Links[] links?;
};

# Provides API key configurations needed when communicating with a remote HTTP endpoint.
public type ApiKeysConfig record {|
    # API key to make authenticated requests.
    @display {label: "", kind: "password"}
    string apikey;
|};
